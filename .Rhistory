library(ROCit)
library(plotROC)
indexes = sample(1:nrow(data), size=0.6*nrow(data))
train <- data[indexes,]
test <- data[-indexes,]
Logistic.1 <- glm(Creditability ~ Account_Balance + Payment_Status_of_Previous_Credit + Value_Savings_Stocks + Length_of_current_employment + Most_valuable_available_asset + Type_of_apartment + Concurrent_Credits + Duration_of_Credit_monthly + Credit_Amount + Age_years)
#summary(Logistic.1)
logit_P_real <- predict(Logistic.1, newdata = test, type = 'response')
logit_P <- ifelse(logit_P_real > 0.5, 1, 0)
actual <- as.numeric(unlist(test[,1]))
df <- data.frame(logit_P, actual)
CM1 <- confusionMatrix(as.factor(logit_P), as.factor(actual), mode = "everything", positive = "1")
logit_P_real
u <- as.matrix(data.frame(pseudo.credit, logit_P_real))
b <- BiCopSelect(pseudo.credit,logit_P_real,familyset = NA)
b
library(pROC)
library(caret)
library(verification)
library(ROCit)
library(plotROC)
indexes = sample(1:nrow(data), size=0.6*nrow(data))
train <- data[indexes,]
test <- data[-indexes,]
Logistic.1 <- glm(Creditability ~ Account_Balance + Payment_Status_of_Previous_Credit + Value_Savings_Stocks + Length_of_current_employment + Most_valuable_available_asset + Type_of_apartment + Concurrent_Credits + Duration_of_Credit_monthly + Credit_Amount + Age_years)
#summary(Logistic.1)
logit_P_real <- predict(Logistic.1, newdata = test, type = 'response')
logit_P <- ifelse(logit_P_real > 0.5, 1, 0)
actual <- as.numeric(unlist(test[,1]))
df <- data.frame(logit_P, actual)
CM1 <- confusionMatrix(as.factor(logit_P), as.factor(actual), mode = "everything", positive = "1")
u <- as.matrix(data.frame(pseudo.credit, logit_P_real))
b <- BiCopSelect(pseudo.credit,logit_P_real,familyset = NA)
b
library(pROC)
library(caret)
library(verification)
library(ROCit)
library(plotROC)
indexes = sample(1:nrow(data), size=0.6*nrow(data))
train <- data[indexes,]
test <- data[-indexes,]
Logistic.1 <- glm(Creditability ~ Account_Balance + Payment_Status_of_Previous_Credit + Value_Savings_Stocks + Length_of_current_employment + Most_valuable_available_asset + Type_of_apartment + Concurrent_Credits + Duration_of_Credit_monthly + Credit_Amount + Age_years)
#summary(Logistic.1)
logit_P_real <- predict(Logistic.1, newdata = test, type = 'response')
logit_P <- ifelse(logit_P_real > 0.5, 1, 0)
actual <- as.numeric(unlist(test[,1]))
df <- data.frame(logit_P, actual)
CM1 <- confusionMatrix(as.factor(logit_P), as.factor(actual), mode = "everything", positive = "1")
u <- as.matrix(data.frame(pseudo.credit, logit_P_real))
b <- BiCopSelect(pseudo.credit,logit_P_real,familyset = NA)
b
#Primero definimos las pseudo-observaciones (de las probabilidades no hace falta pues ya estan entre 0 y 1)
pseudo.credit <- pobs(test$Credit_Amount)
pseudo.elegib <- pobs(logit_P_real)
u <- as.matrix(data.frame(pseudo.credit, pseudo.elegib))
b <- BiCopSelect(pseudo.credit,logit_P_real,familyset = NA)
b
library(pROC)
library(caret)
library(verification)
library(ROCit)
library(plotROC)
indexes = sample(1:nrow(data), size=0.6*nrow(data))
train <- data[indexes,]
test <- data[-indexes,]
Logistic.1 <- glm(Creditability ~ Account_Balance + Payment_Status_of_Previous_Credit + Value_Savings_Stocks + Length_of_current_employment + Most_valuable_available_asset + Type_of_apartment + Concurrent_Credits + Duration_of_Credit_monthly + Credit_Amount + Age_years)
#summary(Logistic.1)
logit_P_real <- predict(Logistic.1, newdata = test, type = 'response')
logit_P <- ifelse(logit_P_real > 0.5, 1, 0)
actual <- as.numeric(unlist(test[,1]))
df <- data.frame(logit_P, actual)
CM1 <- confusionMatrix(as.factor(logit_P), as.factor(actual), mode = "everything", positive = "1")
b <- BiCopSelect(pseudo.credit,logit_P_real,familyset = NA)
b
library(pROC)
library(caret)
library(verification)
library(ROCit)
library(plotROC)
indexes = sample(1:nrow(data), size=0.6*nrow(data))
train <- data[indexes,]
test <- data[-indexes,]
Logistic.1 <- glm(Creditability ~ Account_Balance + Payment_Status_of_Previous_Credit + Value_Savings_Stocks + Length_of_current_employment + Most_valuable_available_asset + Type_of_apartment + Concurrent_Credits + Duration_of_Credit_monthly + Credit_Amount + Age_years)
#summary(Logistic.1)
logit_P_real <- predict(Logistic.1, newdata = test, type = 'response')
logit_P <- ifelse(logit_P_real > 0.5, 1, 0)
actual <- as.numeric(unlist(test[,1]))
df <- data.frame(logit_P, actual)
CM1 <- confusionMatrix(as.factor(logit_P), as.factor(actual), mode = "everything", positive = "1")
b <- BiCopSelect(pseudo.credit,logit_P_real,familyset = NA)
b
library(pROC)
library(caret)
library(verification)
library(ROCit)
library(plotROC)
indexes = sample(1:nrow(data), size=0.6*nrow(data))
train <- data[indexes,]
test <- data[-indexes,]
Logistic.1 <- glm(Creditability ~ Account_Balance + Payment_Status_of_Previous_Credit + Value_Savings_Stocks + Length_of_current_employment + Most_valuable_available_asset + Type_of_apartment + Concurrent_Credits + Duration_of_Credit_monthly + Credit_Amount + Age_years)
#summary(Logistic.1)
logit_P_real <- predict(Logistic.1, newdata = test, type = 'response')
logit_P <- ifelse(logit_P_real > 0.5, 1, 0)
actual <- as.numeric(unlist(test[,1]))
df <- data.frame(logit_P, actual)
CM1 <- confusionMatrix(as.factor(logit_P), as.factor(actual), mode = "everything", positive = "1")
b <- BiCopSelect(pseudo.credit,logit_P_real,familyset = NA)
b
library(pROC)
library(caret)
library(verification)
library(ROCit)
library(plotROC)
indexes = sample(1:nrow(data), size=0.6*nrow(data))
train <- data[indexes,]
test <- data[-indexes,]
Logistic.1 <- glm(Creditability ~ Account_Balance + Payment_Status_of_Previous_Credit + Value_Savings_Stocks + Length_of_current_employment + Most_valuable_available_asset + Type_of_apartment + Concurrent_Credits + Duration_of_Credit_monthly + Credit_Amount + Age_years)
#summary(Logistic.1)
logit_P_real <- predict(Logistic.1, newdata = test, type = 'response')
logit_P <- ifelse(logit_P_real > 0.5, 1, 0)
actual <- as.numeric(unlist(test[,1]))
df <- data.frame(logit_P, actual)
CM1 <- confusionMatrix(as.factor(logit_P), as.factor(actual), mode = "everything", positive = "1")
b <- BiCopSelect(pseudo.credit,logit_P_real,familyset = NA)
b
fit <- fitCopula(frankCopula(dim=2), data = u)
fit
#correlacion empirica entre las variables (Tau de Kendall)
corr.emp <- cor(test$Credit_Amount, logit_P_real, method = "kendall")
fit <- fitCopula(frankCopula(dim=2), data = u)
fit
fit <- fitCopula(frankCopula(dim=2), data = u)
fit
AIC(fit)
tau(frankCopula(param=coef(fit)))
library(pROC)
library(caret)
library(verification)
library(ROCit)
library(plotROC)
indexes = sample(1:nrow(data), size=0.6*nrow(data))
train <- data[indexes,]
test <- data[-indexes,]
Logistic.1 <- glm(Creditability ~ Account_Balance + Payment_Status_of_Previous_Credit + Value_Savings_Stocks + Length_of_current_employment + Most_valuable_available_asset + Type_of_apartment + Concurrent_Credits + Duration_of_Credit_monthly + Credit_Amount + Age_years)
#summary(Logistic.1)
logit_P_real <- predict(Logistic.1, newdata = test, type = 'response')
logit_P <- ifelse(logit_P_real > 0.5, 1, 0)
actual <- as.numeric(unlist(test[,1]))
df <- data.frame(logit_P, actual)
CM1 <- confusionMatrix(as.factor(logit_P), as.factor(actual), mode = "everything", positive = "1")
b <- BiCopSelect(pseudo.credit,logit_P_real,familyset = NA)
b
library(pROC)
library(caret)
library(verification)
library(ROCit)
library(plotROC)
indexes = sample(1:nrow(data), size=0.6*nrow(data))
train <- data[indexes,]
test <- data[-indexes,]
Logistic.1 <- glm(Creditability ~ Account_Balance + Payment_Status_of_Previous_Credit + Value_Savings_Stocks + Length_of_current_employment + Most_valuable_available_asset + Type_of_apartment + Concurrent_Credits + Duration_of_Credit_monthly + Credit_Amount + Age_years)
#summary(Logistic.1)
logit_P_real <- predict(Logistic.1, newdata = test, type = 'response')
logit_P <- ifelse(logit_P_real > 0.5, 1, 0)
actual <- as.numeric(unlist(test[,1]))
df <- data.frame(logit_P, actual)
CM1 <- confusionMatrix(as.factor(logit_P), as.factor(actual), mode = "everything", positive = "1")
library(copula)
library(VineCopula)
#correlacion empirica entre las variables (Tau de Kendall)
corr.emp <- cor(test$Credit_Amount, logit_P_real, method = "kendall")
#Primero definimos las pseudo-observaciones (de las probabilidades no hace falta pues ya estan entre 0 y 1)
pseudo.credit <- pobs(test$Credit_Amount)
pseudo.elegib <- pobs(logit_P_real)
u <- as.matrix(data.frame(pseudo.credit, logit_P_real))
u.temp <- as.matrix(data.frame(pseudo.credit, pseudo.elegib))
b <- BiCopSelect(pseudo.credit,logit_P_real,familyset = NA)
b
b.temp <- BiCopSelect(pseudo.credit,logit_P_real,familyset = NA)
#De esto obtenemos que el mejor ajuste se hace con una frank copula
#Sin embargo, vamos a estimar el parametro utilizando otro paquete
fit <- fitCopula(frankCopula(dim=2), data = u)
fit
AIC(fit)
tau(frankCopula(param=coef(fit)))
b
#Le hacemos fit a varias copulas para comparar
normal.mdl <- fitCopula(normalCopula(dim=2),data=u)
tcop.mdl <- fitCopula(tCopula(dim=2), data=u)
clayton.mdl <- fitCopula(claytonCopula(dim=2), data = u)
#AIC de los modelos (entre mas pequenno mejor)
aic.df <- data.frame( Copula = c("Frank", "Normal", "t", "Clayton"), AIC = c(AIC(fit), AIC(normal.mdl), AIC(tcop.mdl), AIC(clayton.mdl))  )
#SN de los modelos (Test Cramer-von-Mises)
mm <- as.matrix(data.frame(test$Credit_Amount, logit_P_real))
#Gof test
gof.frank <- gofCopula(frankCopula(dim=2,param=-3.6), mm, N=50)
gof.normal <- gofCopula(normalCopula(dim=2), mm, N=50)
gof.t <- gofCopula(tCopula(dim=2,df.fixed = T), mm, N=50)
gof.clayton <- gofCopula(claytonCopula(dim = 2), mm, N=50)
sn.df <- data.frame(Copula = c("Frank", "Normal", "t", "Clayton"), S_n  = c(gof.frank$statistic, gof.normal$statistic, gof.t$statistic, gof.clayton$statistic))
#correlacion empirica entre las variables (Tau de Kendall)
corr.emp <- cor(test$Credit_Amount, logit_P_real, method = "kendall")
#Le hacemos fit a varias copulas para comparar
normal.mdl <- fitCopula(normalCopula(dim=2),data=u)
#correlacion empirica entre las variables (Tau de Kendall)
corr.emp <- cor(credit.fijo, logit.fijo, method = "kendall")
library(copula)
library(VineCopula)
library(ggplot2)
data.test.fija <- read.csv("test_fijo.csv")
credit.fijo <- data.test.fija$credit.amount.fijo
logit.fijo <- data.test.fija$logit.fijo
library(fitdistrplus)
library(actuar)
fit.credit <- fitdist( (credit.fijo/100) , distr = "gamma")
summary(fit.credit)
fit.logit <- fitdist(logit.fijo, distr="norm")
summary(fit.logit)
#correlacion empirica entre las variables (Tau de Kendall)
corr.emp <- cor(credit.fijo, logit.fijo, method = "kendall")
#Data.frame con los datos del testing
##### AQUI PARA EL PSEUDO Y ESO LLAME A LAS COLUMNAS DE DATA.TEST.FIJA
#Primero definimos las pseudo-observaciones (de las probabilidades no hace falta pues ya estan entre 0 y 1)
pseudo.credit <- pobs(credit.fijo)
pseudo.elegib <- pobs(logit_P_real)
#correlacion empirica entre las variables (Tau de Kendall)
corr.emp <- cor(credit.fijo, logit.fijo, method = "kendall")
#Data.frame con los datos del testing
##### AQUI PARA EL PSEUDO Y ESO LLAME A LAS COLUMNAS DE DATA.TEST.FIJA
#Primero definimos las pseudo-observaciones (de las probabilidades no hace falta pues ya estan entre 0 y 1)
pseudo.credit <- pobs(credit.fijo)
pseudo.elegib <- pobs(logit.fijo)
u <- as.matrix(data.frame(pseudo.credit, logit.fijo))
b <- BiCopSelect(pseudo.credit,data.test.fija$logit.fijo,familyset = NA)
b
#De esto obtenemos que el mejor ajuste se hace con una frank copula
#Sin embargo, vamos a estimar el parametro utilizando otro paquete
fit <- fitCopula(frankCopula(dim=2), data = u)
fit
AIC(fit)
tau(frankCopula(param=coef(fit)))
#Le hacemos fit a varias copulas para comparar
normal.mdl <- fitCopula(normalCopula(dim=2),data=u)
tcop.mdl <- fitCopula(tCopula(dim=2), data=u)
clayton.mdl <- fitCopula(claytonCopula(dim=2), data = u)
#AIC de los modelos (entre mas pequenno mejor)
aic.df <- data.frame( Copula = c("Frank", "Normal", "t", "Clayton"), AIC = c(AIC(fit), AIC(normal.mdl), AIC(tcop.mdl), AIC(clayton.mdl))  )
#SN de los modelos (Test Cramer-von-Mises)
mm <- as.matrix(data.frame(credit.fijo, logit.fijo))
#Gof test
gof.frank <- gofCopula(frankCopula(dim=2,param=-3.6), mm, N=50)
gof.normal <- gofCopula(normalCopula(dim=2), mm, N=50)
View(aic.df)
gof.t <- gofCopula(tCopula(dim=2,df.fixed = T), mm, N=50)
gof.clayton <- gofCopula(claytonCopula(dim = 2), mm, N=50)
sn.df <- data.frame(Copula = c("Frank", "Normal", "t", "Clayton"), S_n  = c(gof.frank$statistic, gof.normal$statistic, gof.t$statistic, gof.clayton$statistic))
aic.df %>% kbl(caption="AIC de las diferentes familias de cópulas",
format="latex",
row.names = NA,
col.names = c("Cópula","AIC"), align = 'c')%>%
kable_styling(latex_options = c("HOLD_position"),full_width = T)
library(copula)
library(VineCopula)
library(ggplot2)
library(tidyverse)
data.test.fija <- read.csv("test_fijo.csv")
credit.fijo <- data.test.fija$credit.amount.fijo
logit.fijo <- data.test.fija$logit.fijo
aic.df %>% kbl(caption="AIC de las diferentes familias de cópulas",
format="latex",
row.names = NA,
col.names = c("Cópula","AIC"), align = 'c')%>%
kable_styling(latex_options = c("HOLD_position"),full_width = T)
library(kableExtra)
aic.df %>% kbl(caption="AIC de las diferentes familias de cópulas",
format="latex",
row.names = NA,
col.names = c("Cópula","AIC"), align = 'c')%>%
kable_styling(latex_options = c("HOLD_position"),full_width = T)
sn.df %>% kbl(caption="AIC de las diferentes familias de cópulas",
format="latex",
row.names = NA,
col.names = c("Cópula","Estadístico Cramér-von-Mises"), align = 'c')%>%
kable_styling(latex_options = c("HOLD_position"),full_width = T)
library(scatterplot3d)
my_dist <- mvdc(frankCopula(param=-3.6,dim=2), margins = c("gamma","norm"), paramMargins = list( list(shape=fit.credit$estimate[1], rate=fit.credit$estimate[2]  ),list(mean=fit.logit$estimate[1], sd=fit.logit$estimate[2])  ))
# Generate random sample observations from the multivariate distribution
v <- rMvdc(5000, my_dist)
# Compute the density
pdf_mvd <- dMvdc(v, my_dist)
# Compute the CDF
cdf_mvd <- pMvdc(v, my_dist)
# 3D plain scatterplot of the generated bivariate distribution
par(mfrow = c(1, 2))
scatterplot3d(v[,1],v[,2], pdf_mvd, color="red", main="Density", xlab = "u1", ylab="u2", zlab="pMvdc",pch=".")
scatterplot3d(v[,1],v[,2], cdf_mvd, color="red", main="CDF", xlab = "u1", ylab="u2", zlab="pMvdc",pch=".")
persp(my_dist, dMvdc, xlim = c(-4, 4), ylim=c(0, 2), main = "Density")
contour(my_dist, dMvdc, xlim = c(-4, 4), ylim=c(0, 2), main = "Contour plot")
persp(my_dist, pMvdc, xlim = c(-4, 4), ylim=c(0, 2), main = "CDF")
contour(my_dist, pMvdc, xlim = c(-4, 4), ylim=c(0, 2), main = "Contour plot")
cbind(sim, rep("Simulados"),400)
sim <- rMvdc(400, my_dist)
cbind(sim, rep("Simulados"),400)
cbind(sim, rep("Simulados"))
fit.credit$estimate[2]
library(scatterplot3d)
my_dist <- mvdc(frankCopula(param=-3.6,dim=2), margins = c("gamma","norm"), paramMargins = list( list(shape=fit.credit$estimate[1], rate=fit.credit$estimate[2]/100  ),list(mean=fit.logit$estimate[1], sd=fit.logit$estimate[2])  ))
# Generate random sample observations from the multivariate distribution
v <- rMvdc(5000, my_dist)
# Compute the density
pdf_mvd <- dMvdc(v, my_dist)
# Compute the CDF
cdf_mvd <- pMvdc(v, my_dist)
# 3D plain scatterplot of the generated bivariate distribution
par(mfrow = c(1, 2))
scatterplot3d(v[,1],v[,2], pdf_mvd, color="red", main="Density", xlab = "u1", ylab="u2", zlab="pMvdc",pch=".")
scatterplot3d(v[,1],v[,2], cdf_mvd, color="red", main="CDF", xlab = "u1", ylab="u2", zlab="pMvdc",pch=".")
persp(my_dist, dMvdc, xlim = c(-4, 4), ylim=c(0, 2), main = "Density")
contour(my_dist, dMvdc, xlim = c(-4, 4), ylim=c(0, 2), main = "Contour plot")
persp(my_dist, pMvdc, xlim = c(-4, 4), ylim=c(0, 2), main = "CDF")
contour(my_dist, pMvdc, xlim = c(-4, 4), ylim=c(0, 2), main = "Contour plot")
sim <- rMvdc(400, my_dist)
cbind(sim, rep("Simulados"))
rbind(cbind(sim, rep("Simulados")), c(credit.fijo, logit.fijo, rep("observados")))
c(credit.fijo, logit.fijo, rep("observados")
c(credit.fijo, logit.fijo, rep("observados")
c(credit.fijo, logit.fijo, rep("observados"))
cbind(credit.fijo, logit.fijo, rep("observados"))
rbind(cbind(sim, rep("Simulados")), cbind(credit.fijo, logit.fijo, rep("observados"))  )
simVsObs <- rbind(cbind(sim, rep("Simulados")), cbind(credit.fijo, logit.fijo, rep("observados"))  )
simVsObs <- data.frame(rbind(cbind(sim, rep("Simulados")), cbind(credit.fijo, logit.fijo, rep("observados"))  ))
View(simVsObs)
colnames(simVsObs) <- c("Monto de crédito","Elegibilidad","Método")
sim <- rMvdc(400, my_dist)
simVsObs <- data.frame(rbind(cbind(sim, rep("Simulados")), cbind(credit.fijo, logit.fijo, rep("observados"))  ))
colnames(simVsObs) <- c("Monto de crédito","Elegibilidad","Método")
View(simVsObs)
simVsObs$`Monto de crédito` <- as.numeric(simVsObs$`Monto de crédito`)
simVsObs$Elegibilidad <- as.numeric(simVsObs$Elegibilidad)
graph.sim <- simVsObs %>% ggplot(aes(x = `Monto de crédito`, y=Elegibilidad, color=`Método` ))+
geom_point(size=0.5)+
theme_light()+
labs(x = "Monto", y = "", caption = "Elaboración propia con datos extraídos de Kaggle")
graph.logit.fijo
graph.sim <- simVsObs %>% ggplot(aes(x = `Monto de crédito`, y=Elegibilidad, color=`Método` ))+
geom_point(size=0.5)+
theme_light()+
labs(x = "Monto", y = "", caption = "Elaboración propia con datos extraídos de Kaggle")
graph.sim
graph.sim <- simVsObs %>% ggplot(aes(x = `Monto de crédito`, y=Elegibilidad, color=`Método` ))+
geom_point(size=3)+
theme_light()+
labs(x = "Monto", y = "", caption = "Elaboración propia con datos extraídos de Kaggle")
graph.sim
simVsObs <- data.frame(rbind(cbind(sim, rep("Simulados")), cbind(credit.fijo, logit.fijo, rep("observados"))  ))
simVsObs$`Monto de crédito` <- as.numeric(simVsObs$`Monto de crédito`)
View(simVsObs)
contourPDF <- data.frame("Monto de crédito" = v[1], "Elegibilidad" = v[2], "densidad" = pdf_mvd)
ggplot(contourPDF, aes(`Monto de crédito`, Elegibilidad, z=densidad) ) + geom_contour()
contourPDF <- data.frame("Monto de crédito" = v[1], "Elegibilidad" = v[2], "densidad" = pdf_mvd)
ggplot(contourPDF, aes("Monto de crédito", Elegibilidad, z=densidad) ) + geom_contour()
ggplot(contourPDF, aes("Monto de crédito", Elegibilidad, z=densidad) ) + geom_contour() + scale_fill_distiller(palette = "Spectral", direction = -1)
ot3d)
library(plotly)
install.packages("plotly")
install.packages("reshape2")
library(scatterplot3d)
library(plotly)
library(reshape2)
my_dist <- mvdc(frankCopula(param=-3.6,dim=2), margins = c("gamma","norm"), paramMargins = list( list(shape=fit.credit$estimate[1], rate=fit.credit$estimate[2]/100  ),list(mean=fit.logit$estimate[1], sd=fit.logit$estimate[2])  ))
# Generate random sample observations from the multivariate distribution
v <- rMvdc(5000, my_dist)
# Compute the density
pdf_mvd <- dMvdc(v, my_dist)
# Compute the CDF
cdf_mvd <- pMvdc(v, my_dist)
contourPDF <- data.frame("Monto de crédito" = v[1], "Elegibilidad" = v[2], "densidad" = pdf_mvd)
ggplot(contourPDF, aes("Monto de crédito", Elegibilidad, z=densidad) ) + geom_contour() + scale_fill_distiller(palette = "Spectral", direction = -1)
View(contourPDF)
library(scatterplot3d)
library(plotly)
library(reshape2)
my_dist <- mvdc(frankCopula(param=-3.6,dim=2), margins = c("gamma","norm"), paramMargins = list( list(shape=fit.credit$estimate[1], rate=fit.credit$estimate[2]/100  ),list(mean=fit.logit$estimate[1], sd=fit.logit$estimate[2])  ))
# Generate random sample observations from the multivariate distribution
v <- rMvdc(5000, my_dist)
# Compute the density
pdf_mvd <- dMvdc(v, my_dist)
# Compute the CDF
cdf_mvd <- pMvdc(v, my_dist)
contourPDF <- data.frame("Monto de crédito" = v[,1], "Elegibilidad" = v[,2], "densidad" = pdf_mvd)
ggplot(contourPDF, aes("Monto de crédito", Elegibilidad, z=densidad) ) + geom_contour() + scale_fill_distiller(palette = "Spectral", direction = -1)
# 3D plain scatterplot of the generated bivariate distribution
par(mfrow = c(1, 2))
scatterplot3d(v[,1],v[,2], pdf_mvd, color="red", main="Density", xlab = "u1", ylab="u2", zlab="pMvdc",pch=".")
scatterplot3d(v[,1],v[,2], cdf_mvd, color="red", main="CDF", xlab = "u1", ylab="u2", zlab="pMvdc",pch=".")
persp(my_dist, dMvdc, xlim = c(-4, 4), ylim=c(0, 2), main = "Density")
contour(my_dist, dMvdc, xlim = c(-4, 4), ylim=c(0, 2), main = "Contour plot")
persp(my_dist, pMvdc, xlim = c(-4, 4), ylim=c(0, 2), main = "CDF")
contour(my_dist, pMvdc, xlim = c(-4, 4), ylim=c(0, 2), main = "Contour plot")
View(contourPDF)
ggplot(contourPDF, aes(x="Monto de crédito", y=Elegibilidad, z=densidad) ) + geom_contour() + scale_fill_distiller(palette = "Spectral", direction = -1)
library(scatterplot3d)
library(plotly)
library(reshape2)
my_dist <- mvdc(frankCopula(param=-3.6,dim=2), margins = c("gamma","norm"), paramMargins = list( list(shape=fit.credit$estimate[1], rate=fit.credit$estimate[2]/100  ),list(mean=fit.logit$estimate[1], sd=fit.logit$estimate[2])  ))
# Generate random sample observations from the multivariate distribution
v <- rMvdc(5000, my_dist)
# Compute the density
pdf_mvd <- dMvdc(v, my_dist)
# Compute the CDF
cdf_mvd <- pMvdc(v, my_dist)
contourPDF <- data.frame("Monto de crédito" = as.numeric(v[,1]), "Elegibilidad" = as.numeric(v[,2]), "densidad" = pdf_mvd)
ggplot(contourPDF, aes(x="Monto de crédito", y=Elegibilidad, z=densidad) ) + geom_contour() + scale_fill_distiller(palette = "Spectral", direction = -1)
# 3D plain scatterplot of the generated bivariate distribution
par(mfrow = c(1, 2))
scatterplot3d(v[,1],v[,2], pdf_mvd, color="red", main="Density", xlab = "u1", ylab="u2", zlab="pMvdc",pch=".")
scatterplot3d(v[,1],v[,2], cdf_mvd, color="red", main="CDF", xlab = "u1", ylab="u2", zlab="pMvdc",pch=".")
persp(my_dist, dMvdc, xlim = c(-4, 4), ylim=c(0, 2), main = "Density")
contour(my_dist, dMvdc, xlim = c(-4, 4), ylim=c(0, 2), main = "Contour plot")
persp(my_dist, pMvdc, xlim = c(-4, 4), ylim=c(0, 2), main = "CDF")
contour(my_dist, pMvdc, xlim = c(-4, 4), ylim=c(0, 2), main = "Contour plot")
ggplot(contourPDF, aes(x="Monto de crédito", y=Elegibilidad) ) + geom_density_2d() + scale_fill_distiller(palette = "Spectral", direction = -1)
min(contourPDF$Monto.de.crédito)
max(contourPDF$Monto.de.crédito)
max(contourPDF$elegibilidad)
max(contourPDF$legibilidad)
max(contourPDF$Elegibilidad)
ggplot(contourPDF, aes(x=Monto.de.crédito, y=Elegibilidad) ) + geom_density_2d() + scale_fill_distiller(palette = "Spectral", direction = -1)
ggplot(contourPDF, aes(x=Monto, y=Elegibilidad) ) + geom_density_2d() + scale_fill_distiller(palette = "Spectral", direction = -1)
ggplot(contourPDF, aes(x=Monto, y=Elegibilidad, z=densidad) ) + geom_contour() + scale_fill_distiller(palette = "Spectral", direction = -1)
contourPDF <- data.frame("Monto" = as.numeric(v[,1]), "Elegibilidad" = as.numeric(v[,2]), "densidad" = pdf_mvd)
ggplot(contourPDF, aes(x=Monto, y=Elegibilidad, z=densidad) ) + geom_contour() + scale_fill_distiller(palette = "Spectral", direction = -1)
ggplot(contourPDF, aes(x=Monto, y=Elegibilidad) ) + geom_density_2d() + scale_fill_distiller(palette = "Spectral", direction = -1)
persp(my_dist, dMvdc, xlim = c(-4, 4), ylim=c(0, 2), main = "Density")
contour(my_dist, dMvdc, xlim = c(-4, 4), ylim=c(0, 2), main = "Contour plot")
library(scatterplot3d)
library(plotly)
library(reshape2)
my_dist <- mvdc(frankCopula(param=-3.6,dim=2), margins = c("gamma","norm"), paramMargins = list( list(shape=fit.credit$estimate[1], rate=fit.credit$estimate[2]/100  ),list(mean=fit.logit$estimate[1], sd=fit.logit$estimate[2])  ))
# Generate random sample observations from the multivariate distribution
v <- rMvdc(5000, my_dist)
# Compute the density
pdf_mvd <- dMvdc(v, my_dist)
# Compute the CDF
cdf_mvd <- pMvdc(v, my_dist)
contourPDF <- data.frame("Monto" = as.numeric(v[,1]), "Elegibilidad" = as.numeric(v[,2]), "densidad" = pdf_mvd)
ggplot(contourPDF, aes(x=Monto, y=Elegibilidad) ) + geom_density_2d() + scale_fill_distiller(palette = "Spectral", direction = -1)
max(contourPDF$Elegibilidad)
# 3D plain scatterplot of the generated bivariate distribution
par(mfrow = c(1, 2))
scatterplot3d(v[,1],v[,2], pdf_mvd, color="red", main="Density", xlab = "u1", ylab="u2", zlab="pMvdc",pch=".")
scatterplot3d(v[,1],v[,2], cdf_mvd, color="red", main="CDF", xlab = "u1", ylab="u2", zlab="pMvdc",pch=".")
persp(my_dist, dMvdc, xlim = c(-4, 4), ylim=c(0, 2), main = "Density")
contour(my_dist, dMvdc, xlim = c(-4, 4), ylim=c(0, 2), main = "Contour plot")
persp(my_dist, pMvdc, xlim = c(-4, 4), ylim=c(0, 2), main = "CDF")
contour(my_dist, pMvdc, xlim = c(-4, 4), ylim=c(0, 2), main = "Contour plot")
library(scatterplot3d)
library(plotly)
library(reshape2)
my_dist <- mvdc(frankCopula(param=-3.6,dim=2), margins = c("gamma","norm"), paramMargins = list( list(shape=fit.credit$estimate[1], rate=fit.credit$estimate[2]/100  ),list(mean=fit.logit$estimate[1], sd=fit.logit$estimate[2])  ))
# Generate random sample observations from the multivariate distribution
v <- rMvdc(5000, my_dist)
# Compute the density
pdf_mvd <- dMvdc(v, my_dist)
# Compute the CDF
cdf_mvd <- pMvdc(v, my_dist)
contourPDF <- data.frame("Monto" = as.numeric(v[,1]), "Elegibilidad" = as.numeric(v[,2]), "densidad" = pdf_mvd)
ggplot(contourPDF, aes(x=Monto, y=Elegibilidad) ) + geom_density_2d() + scale_fill_distiller(palette = "Spectral", direction = -1)
max(contourPDF$Elegibilidad)
# 3D plain scatterplot of the generated bivariate distribution
par(mfrow = c(1, 2))
scatterplot3d(v[,1],v[,2], pdf_mvd, color="red", main="Density", xlab = "u1", ylab="u2", zlab="pMvdc",pch=".")
scatterplot3d(v[,1],v[,2], cdf_mvd, color="red", main="CDF", xlab = "u1", ylab="u2", zlab="pMvdc",pch=".")
persp(my_dist, dMvdc, xlim = c(0, 20000), ylim=c(0, 2), main = "Density")
contour(my_dist, dMvdc, xlim = c(0, 20000), ylim=c(0, 2), main = "Contour plot")
persp(my_dist, pMvdc, xlim = c(-4, 4), ylim=c(0, 2), main = "CDF")
contour(my_dist, pMvdc, xlim = c(-4, 4), ylim=c(0, 2), main = "Contour plot")
library(scatterplot3d)
library(plotly)
library(reshape2)
my_dist <- mvdc(frankCopula(param=-3.6,dim=2), margins = c("gamma","norm"), paramMargins = list( list(shape=fit.credit$estimate[1], rate=fit.credit$estimate[2]/100  ),list(mean=fit.logit$estimate[1], sd=fit.logit$estimate[2])  ))
# Generate random sample observations from the multivariate distribution
v <- rMvdc(5000, my_dist)
# Compute the density
pdf_mvd <- dMvdc(v, my_dist)
# Compute the CDF
cdf_mvd <- pMvdc(v, my_dist)
contourPDF <- data.frame("Monto" = as.numeric(v[,1]), "Elegibilidad" = as.numeric(v[,2]), "densidad" = pdf_mvd)
ggplot(contourPDF, aes(x=Monto, y=Elegibilidad) ) + geom_density_2d() + scale_fill_distiller(palette = "Spectral", direction = -1)
max(contourPDF$Elegibilidad)
# 3D plain scatterplot of the generated bivariate distribution
par(mfrow = c(1, 2))
scatterplot3d(v[,1],v[,2], pdf_mvd, color="red", main="Density", xlab = "u1", ylab="u2", zlab="pMvdc",pch=".")
scatterplot3d(v[,1],v[,2], cdf_mvd, color="red", main="CDF", xlab = "u1", ylab="u2", zlab="pMvdc",pch=".")
persp(my_dist, dMvdc, xlim = c(0, 10000), ylim=c(0, 2), main = "Density")
contour(my_dist, dMvdc, xlim = c(0, 10000), ylim=c(0, 2), main = "Contour plot")
persp(my_dist, pMvdc, xlim = c(-4, 4), ylim=c(0, 2), main = "CDF")
contour(my_dist, pMvdc, xlim = c(-4, 4), ylim=c(0, 2), main = "Contour plot")
dens <- ggplot(contourPDF, aes(x=Monto, y=Elegibilidad) ) + geom_density_2d() + scale_fill_distiller(palette = "Spectral", direction = -1) + theme_light()+
labs(x = "Monto", y = "Elegibilidad", caption = "Elaboración propia con datos extraídos de Kaggle")
dens
contourCDF <- data.frame("Monto" = as.numeric(v[,1]), "Elegibilidad" = as.numeric(v[,2]), "dist" = cdf_mvd)
dist <- ggplot(contourCDF, aes(x=Monto, y=Elegibilidad, z=dist) ) + geom_contour() + scale_fill_distiller(palette = "Spectral", direction = -1) + theme_light()+
labs(x = "Monto", y = "Elegibilidad", caption = "Elaboración propia con datos extraídos de Kaggle")
dist
dist <- ggplot(contourCDF, aes(x=Monto, y=Elegibilidad) ) + geom_density_2d() + scale_fill_distiller(palette = "Spectral", direction = -1) + theme_light()+
labs(x = "Monto", y = "Elegibilidad", caption = "Elaboración propia con datos extraídos de Kaggle")
dist
dens
dist
dens
